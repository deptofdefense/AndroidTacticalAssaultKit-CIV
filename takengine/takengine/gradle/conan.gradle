import java.security.MessageDigest

project.ext.getValueFromPropertiesFile = { propFile, key ->
    if(!propFile.isFile() || !propFile.canRead())
        return null
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}

project.ext.getProperty = { key, defVal ->
    return getValueFromPropertiesFile(rootProject.file('local.properties'), key) ?:
            project.findProperty(key) ?:
            rootProject.findProperty(key) ?:
            defVal;
}

project.ext.getHash = { s ->
    try {
        def digest = MessageDigest.getInstance("SHA-256")
        def hash = digest.digest(s.getBytes("UTF-8"))
        return Base64.encoder.encodeToString(hash)
    }catch(Exception ex) {
        def toThrow = new GradleException()
        toThrow.initCause(ex)
        throw toThrow
    }
}

// configure Conan
project.afterEvaluate { ->
    def conanRepoUrl = getProperty('takrepo.conan.url', null) ?:
            getProperty('takrepo.url', null)
    def conanRepoUser = getProperty('takrepo.conan.user', null) ?:
            getProperty('takrepo.user', null)
    def conanRepoPassword = getProperty('takrepo.conan.password', null) ?:
            getProperty('takrepo.password', null)
    if(conanRepoUrl == null || conanRepoUser == null || conanRepoPassword == null) {
        println("Warning: Conan repo is not configured, using local cache only")
        return
    }

    def conanDir = getProperty('conan.dir', null)
    def conanCmd = 'conan'
    if(conanDir != null)
        conanCmd = (new File(conanDir, conanCmd)).getAbsolutePath()

    // check for the repo
    def os = new ByteArrayOutputStream()
    exec {
        commandLine conanCmd, 'remote', 'list'
        standardOutput = os
    }
    def remotes = os.toString()
    if(remotes != null && remotes.contains(conanRepoUrl))
        return

    def remote = getHash(project.projectDir.getAbsolutePath() + '@' + conanRepoUrl)
    exec {
        workingDir rootProject.projectDir
        commandLine 'conan', 'config', 'set', 'general.revisions_enabled=1'
    }
    exec {
        workingDir rootProject.projectDir
        commandLine 'conan', 'remote', 'add', remote, conanRepoUrl
    }
    exec {
        workingDir rootProject.projectDir
        commandLine 'conan', 'user', '-r', remote, '-p', conanRepoPassword, conanRepoUser
    }
}
