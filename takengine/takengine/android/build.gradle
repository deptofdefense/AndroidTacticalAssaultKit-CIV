 buildscript {
    repositories {
        jcenter()
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
    }
 }

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        jcenter()
    }
}


apply plugin: 'com.android.library'
apply from: '../gradle/conan.gradle', to: project

android {
    compileSdkVersion 26
    buildToolsVersion "29.0.2"
    ndkVersion "12.1.2977051"

    defaultConfig {
        minSdkVersion 21
        ndk {
            moduleName 'takengine'
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a'
        }
		
		externalNativeBuild {
			cmake {
                arguments "-DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/android.toolchain.cmake",
                    "-DCMAKE_ANDROID_NDK=${project.android.ndkDirectory.toString().replaceAll('\\\\', '/')}",
                    "-DANDROID_TOOLCHAIN=gcc",
                    "-DANDROID_STL=gnustl_static",
                    "-DANDROID_PLATFORM=android-24" // 24 is the highest so available in 12 ndk??
                cFlags "-D__GXX_EXPERIMENTAL_CXX0X__"
                cppFlags "-fexceptions", "-frtti"
            }
		}
    }

	externalNativeBuild {
		cmake {
            path = '../CMakeLists.txt'
            version '3.14.7+' // Matches any CMake install with version 3.14.7 or greater.
        }
	}
		
    defaultConfig {
        minSdkVersion 21
    }

    flavorDimensions "application"

    productFlavors {
        mil {
            dimension "application"
        }

        civ {
            dimension "application"
        }

        dhsSmall {
            dimension "application"
        }

        fvey {
            dimension "application"
        }

        intl {
            dimension "application"
        }

        aeronet {
            dimension "application"
        }

        aus {
            dimension "application"
        }

        nzl {
            dimension "application"
        }

        gbr {
            dimension "application"
        }

        can {
            dimension "application"
        }

    }

    buildTypes {
        all {
        }

        release {
        }

        debug {
            jniDebuggable true
        }

        sdk {
        }
    }

    sourceSets {
        main {
        }
    }
}

clean {
    // JNI headers
    // external unpacks
    delete 'thirdparty/android-arm64-v8a-release'
    delete 'thirdparty/android-armeabi-v7a-release'
    delete 'thirdparty/android-x86-release'
}

// NDK build output installation
android.libraryVariants.all { variant ->
    task "install${variant.name.capitalize()}Outputs"(dependsOn: ["externalNativeBuild${variant.name.capitalize()}", "packageHeaders"]) {
        doLast {
            def jniLibsOutputDir;
            if(project.hasProperty("jniLibs.outputDir"))
                jniLibsOutputDir = project.property("jniLibs.outputDir")
            else
                jniLibsOutputDir = '../build/android'

            println 'Installing libtakengine.so into ' + jniLibsOutputDir

            def arch = ['armeabi-v7a', 'arm64-v8a', 'x86']

            // copy built .so's into the 'jniLibs' directory
            arch.each { aarch ->
                def srcPattern = variant.name.toLowerCase().contains('release') ?
                        "${buildDir.absolutePath}/intermediates/stripped_native_libs/${variant.name}/out/lib/${aarch}/" :
                        "${buildDir.absolutePath}/intermediates/cmake/${variant.name}/obj/${aarch}/"
                copy {
                    from(srcPattern) {
                        include 'libtakengine.so'
                    }

                    into "${jniLibsOutputDir}/${aarch}/"

                    // always overwrite
                    duplicatesStrategy 'include'
                }
            }

            if(project.hasProperty("includes.outputDir")) {
                copy {
                    from('../build') {
                        include 'takengine-api.zip'
                    }
                    into project.property('includes.outputDir') + '/takengine'

                    duplicatesStrategy 'include'
                }
                copy {
                    from('../android/thirdparty') {
                        include 'ttp-dist.zip'
                    }
                    into project.property('includes.outputDir') + '/ttp'

                    duplicatesStrategy 'include'
                }
                copy {
                    from('thirdparty/android-armeabi-v7a-release') {
                        include 'ttp-include.zip'

                    }
                    into project.property('includes.outputDir') + '/ttp'

                    duplicatesStrategy 'include'
                }

                println 'Installing TAK Engine headers into ' + project.property('includes.outputDir')
            } else {
                println 'WARNING: Not installing TAK Engine headers'
            }
        }
    }
    task "install${variant.name.capitalize()}StrippedJniLibs"(dependsOn: ["strip${variant.name.capitalize()}DebugSymbols"]) {
        // copy built .so's into the 'jniLibs' directory
        doLast {
            def jniLibsOutputDir;
            if(project.hasProperty("jniLibs.outputDir"))
                jniLibsOutputDir = project.property("jniLibs.outputDir")
            else
                jniLibsOutputDir = '../build/android'

            def arch = ['armeabi-v7a', 'arm64-v8a', 'x86']
            // copy built .so's into the 'jniLibs' directory
            arch.each { aarch ->
                copy {
                    from("${buildDir.absolutePath}/intermediates/stripped_native_libs/${variant.name}/out/lib/${aarch}/") {
                        include 'libtakengine.so'
                    }

                    into "${jniLibsOutputDir}/${aarch}/"

                    // always overwrite
                    duplicatesStrategy 'include'
                }
            }
        }
    }
}

task copyHeaders {
    doLast {
        def buildIncludeDir = '../build/include'

        // clean the directory if it exists
        if (new File(buildIncludeDir).exists())
            delete buildIncludeDir

        // copy all headers into 'mapengine/build/include'

        // library headers
        copy {
            include '**/*.h'
            from '../src/main/cpp'
            into buildIncludeDir + "/takengine"
        }
        // thirdparty headers
        copy {
            include '*.h'
            include '*.hh'
            include 'LICENSE'
            include 'README.md'
            from '../../thirdparty/tinygltf/'
            into buildIncludeDir + "/tinygltf"
        }
        copy {
            include 'json.hpp'
            from '../../thirdparty/tinygltf/'
            into buildIncludeDir + "/json"
        }
        copy {
            //
            include '*.h'
            include '*.hh'
            include 'LICENSE'
            include 'README.md'
            from '../../thirdparty/tinygltfloader/'
            into buildIncludeDir + "/tinygltfloader"
        }
    }
}

task packageHeaders(type: Zip, dependsOn: ['copyHeaders']) {
    def buildIncludeDir = '../build/include'

    from '../build'
    include 'include/**/*.h'
    include 'include/**/*.hh'
    include 'include/**/*.hpp'
    archiveName = 'takengine-api.zip'
    destinationDir = file('../build')
}

android.libraryVariants.all { variant ->
    // JNI lib merge relies on installation of NDK build output
    ["copy${variant.name.capitalize()}JniLibsProjectOnly",
     "copy${variant.name.capitalize()}JniLibsProjectAndLocalJars"].each { taskName ->
        def task = tasks.findByName(taskName);
        if(task) {
            task.dependsOn("install${variant.name.capitalize()}Outputs")
        }
    }
}
