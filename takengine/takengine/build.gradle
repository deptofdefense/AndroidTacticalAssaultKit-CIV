plugins {
    id 'java'
}

apply plugin: 'gov.tak.gradle.cmake.gradle-cmake-plugin'
apply from: 'gradle/conan.gradle', to: project

cmake {
    sourceFolder = file("$projectDir")
    workingFolder = file("$projectDir/build")
    buildTarget = 'install'
}

// OS and architecture detection based on host runtime
ext.runtimePlatform = { ->
    // adapted from `EngineLibrary`
    def arch = System.getProperty("os.arch")
    def os = System.getProperty("os.name")

    String rt;
    if(os.toLowerCase().indexOf("win") >= 0) {
        rt = 'win'
    } else if(os.toLowerCase().indexOf("linux") >= 0) {
        rt = 'linux'
    } else  if(os.toLowerCase().indexOf("mac") >= 0 || os.toLowerCase().indexOf("darwin") >= 0) {
        rt = 'macos'
    } else {
        throw new GradleException("Unsupported runtime host arch=${arch} os = ${os}")
    }
    // architecture detection
    if(arch.toLowerCase().indexOf("64") >= 0) {
        rt += '64'
    } else if(arch.toLowerCase().indexOf("32") >= 0) {
        rt += '32'
    } else if(arch.toLowerCase().indexOf("86") >= 0) {
        rt += '32'
    } else {
        throw new GradleException("Unsupported runtime host arch=${arch} os = ${os}")
    }
}

dependencies {
    // XML pull parser
    compile('net.sf.kxml:kxml2:2.3.0')

    // org.json
    compile('org.json:json:20190722')

    // apache http client
    compile('org.apache.httpcomponents:httpclient:4.5.12')

    // Use JUnit test framework
    testImplementation('junit:junit:4.12')

    compile('gov.tak.support:android-port:1.3.1') {
        transitive = false
    }

    implementation('gov.tak.support:gles-jogl-c:1.0.2')
    implementation("gov.tak.thirdparty:takthirdparty-rt-${runtimePlatform}:2.0.0")
    implementation('gov.tak.thirdparty:gdal:1.0.0:tak')
    implementation('gov.tak.thirdparty:gdaldata:1.0.0')
    implementation('gov.tak.thirdparty:jassimp:1.0.0:tak')
}

sourceSets {
    main {
        java {
            // shared sources
            srcDirs 'src/main/java'
            // desktop Java specific
            srcDirs 'src/jre/java'
        }
        output.resourcesDir = 'build/classes/java/main'
    }
    test {
        java {
            srcDirs 'src/android/test'
        }
    }
}

processResources {
    with copySpec {
        from('src/main/res/raw')
        {
            into 'resources/raw'
        }
        from('src/main/res/drawable')
        {
            into 'resources/drawable'
            rename { String filename -> filename.replace('.png', '') }
        }
        from('src/main/assets/certs')
        {
            into 'assets/certs'
        }
    }
}

jar {
    into('libs') {
        from "${project.buildDir}/jniLibs"
        include '**/*.dll'
        include '**/*.so'
            include '**/*.dylib'
    }
}

test {
    useJUnit()
	maxHeapSize = '1G'
}

task generateJniHeaders(dependsOn: ["classes"]) {
    group = 'Build'
    description = 'Generates native header files from Java classes in takengine/src/main/java.'

    def cppPath = "src/main/jni/"

    // param1 = header file name (including .h)
    // param2 = class name (as string) or class names (as string list)
    ext.javah = { param1, param2 ->
        exec {
            // configure classpath used by javah
            String classpath = ""
            for (def cp : sourceSets.main.runtimeClasspath)
                classpath += File.pathSeparator + cp.getAbsolutePath()

            // the output file
            def outputFile = (new File(projectDir, cppPath + param1)).toString()

            // create command line args
            ArrayList<String> clargs = ['javah', '-classpath', classpath, "-o", outputFile]
            clargs.addAll(param2)

            // execute javah
            commandLine clargs
        }
    }

    def javahProperties = new File(project.projectDir, cppPath + "javah.properties")
    if (!javahProperties.isFile() || !javahProperties.canRead())
        throw new GradleException('javah.properties file is missing')
    def prop = new Properties()

    javahProperties.withReader { reader ->
        prop.load(reader)
    }

    prop.each { headerFile, commaDelimitedClassNames ->

        commaDelimitedClassNames.split(", ").each { fullyQualifiedClassName ->
            // find file on classpath
            def inputSearchPaths = new ArrayList<File>(sourceSets.main.runtimeClasspath.size())
            for (def cp : sourceSets.main.runtimeClasspath) {
                if (cp.isDirectory()) {
                    inputSearchPaths.add(cp)
                }
            }
            for (def cp : inputSearchPaths) {
                def classFile = new File(cp, fullyQualifiedClassName.replaceAll("\\.", "/") + ".class")
                if (classFile.exists()) {
                    inputs.file(classFile)
                    break
                }
            }

            outputs.file(cppPath + headerFile)
        }
    }
	
    doLast {
        prop.each { key, val ->
            javah(key, val.split(', '))
        }
    }
}

task cleanCMakeExports(type: Delete) {
    group = 'Build'
    description = 'Cleans the \"exports\" directory created by the inter-dependent CMake projects in this repository.'

    delete '../exports'
}

cmakeConfigure.dependsOn generateJniHeaders
clean.dependsOn cleanCMakeExports

jar.dependsOn cmakeBuild
