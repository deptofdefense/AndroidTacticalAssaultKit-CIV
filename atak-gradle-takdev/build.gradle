
buildscript {

    description = 'Gradle plugin to resolve and apply development kits and test frameworks to ATAK plugins'
    group = 'com.atakmap.gradle'
    version = '2.4.1'

    ext.getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def publishUrlProp = project.properties['maven.publish.url'] ?: getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'maven.publish.url')
    ext.publishUrl = null == publishUrlProp ? 'http://localhost/' : publishUrlProp
    ext.mavenUser = project.properties['maven.user'] ?: getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'maven.user')
    ext.mavenPassword = project.properties['maven.password'] ?: getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'maven.password')
}

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
}

repositories {
    jcenter()
    mavenLocal()
}

dependencies {

    // FIX ME, tests don't yet work as plugin is not resolved on class path
    // See https://docs.gradle.org/current/userguide/test_kit.html for nominal guidance
    // However, I haven't been able to make the groovy framework, spock, as I get
    // an error regarding classpath and plugin under test (same happens with JUnit).

    testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

gradlePlugin {
    plugins {
        takdev {
            id = 'atak-takdev-plugin'
            implementationClass = 'com.atakmap.gradle.takdev.TakDevPlugin'
        }
    }
}

publishing {
    repositories {
        maven {
            url = project.publishUrl
            name = 'upstream'
            credentials {
                username project.mavenUser
                password project.mavenPassword
            }
        }
    }

    publications {
        takdev(MavenPublication) {
            from components.java
        }
    }
}

jar {
  manifest {
    attributes(
      "Git-Version": getVersionName())
  }
}


// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim()
        println("versionName[git]: $describe")
        return describe
    } catch (Exception ignored) {
       println("error occurred, using revision of 1")
       return 1
    }
}

