/**
 * Extension defining
 */
class Javac {
    /**
     * Input properties file. Keys are the generated output header file name, values are comma-separated list of the
     * Java class(es) -- as fully qualified classname -- provided as input into the `javac` process.
     */
    File input
    /**
     * Output directory for generated JNI header files.
     */
    File outputDir
}

/**
 * Processes an input properties file, defining the output headers mapped to input java classes, to generate JNI header
 * files into the specified output directory.
 */
abstract class GenerateJniHeaders extends DefaultTask {
    /** @return input properties file mapping to-be-generated header file to input java classnames */
    @InputFile
    abstract Property<File> getInput()
    /** @return output directory for generated JNI header files */
    @Input
    abstract Property<File> getOutputDir()

    /** @return classpath to be provided to the `javac` process. */
    @Input
    abstract Property<Collection<File>> getClasspath()

    /** @return `input` transformed into `Map` of output header files to array of source classnames */
    @Input
    final Provider<Map<File, String[]>> generateConfig = input.map {
        // process all inputs
        def prop = new Properties()
        def f = input.getOrNull()
        if(f != null) {
            f.withReader { reader ->
                prop.load(reader)
            }
        }

        def value = new HashMap<>()

        // generate inputs/outputs from input headers definitions
        prop.each { headerFileName, commaDelimitedClassNames ->
            def headerFile = new File(outputDir.getOrNull(), headerFileName)
            def sourceClasses = commaDelimitedClassNames.split(", ")
            value.put(headerFile, sourceClasses)
        }
        return value
    }

    /** @return `generateConfig` transformed into collection of all Java files corresponding to input classes */
    @InputFiles
    final Provider<FileCollection> javaSources = generateConfig.map {
        def value = project.files()
        generateConfig.getOrElse(Collections.emptyMap()).each { headerFile, sourceClasses ->
            sourceClasses.each { fullyQualifiedClassName ->
                // find file on classpath
                def javacInputFilesPaths = project.isAndroidKernelBuild ?
                        project.android.sourceSets.main.java.srcDirs :
                        project.sourceSets.main.java.srcDirs
                for (def sp : javacInputFilesPaths) {
                    def javaFile = new File(sp, fullyQualifiedClassName.replaceAll("\\.", "/") + ".java")
                    if (javaFile.exists()) {
                        value += javaFile
                        break
                    }
                }
            }
        }
        return value
    }

    /** @return `generateConfig` transformed into collection header files that will be generated */
    @OutputFiles
    final Provider<Collection<File>> headerFiles = generateConfig.map {
        def value = new HashSet<>()
        generateConfig.getOrElse(Collections.emptyMap()).each { headerFile, sourceClasses ->
            value += headerFile
        }
        return value
    }

    /** Generates header files from Java classes via `javac` process. */
    @TaskAction
    void generate() {
        String classpathArg = ""
        classpath.getOrElse(Collections.emptySet()).each { cp ->
            classpathArg += File.pathSeparator + cp.getAbsolutePath()
        }
        generateConfig.getOrElse(Collections.emptyMap()).each { header, classes ->
            String jniFolder = "../engine/src/main/jni/"
            def rootDirectory = project.file("../engine/src/")
            def result = project.exec {
                // create command line args
                ArrayList<String> clargs = ['javac', '-classpath', classpathArg, "-h", jniFolder]
                classes.each { fullyQualifiedClassName ->
                    // find file on classpath
                        def javaFile = fullyQualifiedClassName.replaceAll("\\.", "/") + ".java"
                        def javaFileWithPath = project.fileTree(dir: rootDirectory, include: "**/"+javaFile, exclude:"**/jre/**/"+javaFile).first()
                        clargs.addAll(javaFileWithPath)
                    }
                commandLine clargs
            }
            if(result.exitValue == 0){
                header.write("")
                classes.each {className ->
                    String generatedFileName = className.replace(".","_")+".h"
                    def file = new File(outputDir.getOrNull() , generatedFileName)
                    if(file.exists()) {
                        def headerFileText = file.text
                        header.append(headerFileText)
                        file.delete()
                    }
                    else {
                        println "No Header file is generated for : " + header.canonicalFile
                    }
                }
            }
        }
    }
}

// Create the `javac` extension on the project
project.extensions.create("javac", Javac)

// Inject the `generateJniHeaders` task
project.afterEvaluate {
    project.tasks.register('generateJniHeaders', GenerateJniHeaders) {
        group = 'Build'
        description = 'Generates native header files from Java classes in engine/src/main/java.'

        //classpath = project.files()
        classpath = new HashSet<>()
        input = javac.input
        outputDir = javac.outputDir

        String classesTask = null
        def cp = new HashSet<>()
        if(project.isJavaKernelBuild) {
            // configure classpath
            sourceSets.main.compileClasspath.each { e -> cp += e }
            sourceSets.main.runtimeClasspath.each { e -> cp += e }

            // define task dependency
            classesTask = 'classes'
        } else if(project.isAndroidKernelBuild) {
            // select variant for dependency, giving deference to `release`
            def javacClasspathVariant = project.getAndroidBuildVariant(project, 'release')

            // set up classpath
            cp += javacClasspathVariant.javaCompileProvider.get().classpath
            cp += files(javacClasspathVariant.javaCompileProvider.get().destinationDir)

            cp += new File("${android.sdkDirectory.path}/platforms/${android.compileSdkVersion}/android.jar")

            // define task dependency
            classesTask = "compile${javacClasspathVariant.name.capitalize()}JavaWithJavac"
        } else {
            throw new GradleException("Unsupported kernel build target: ${kernelBuildTarget}")
        }
        classpath = cp

        // configure the dependency on the class file generation task
        if(classesTask != null)
            dependsOn classesTask
    }
    // XXX - below is observed to cause script evaluation failure when the `engine` project has
    //       dependencies on other projects. Deferring fix as this is a new (convenience) feature
    // configure cleanup of generated JNI header files
    //project.clean {
    //    delete generateJniHeaders.outputs
    //}
}