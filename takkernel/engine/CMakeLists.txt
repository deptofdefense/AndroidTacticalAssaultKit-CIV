# This is the root CMake project for the TAK map engine native builds. This project is currently responsible for generating
# and executing the following builds:
#
#       - takengine
#       - takenginejni
#
# Note that generating and executing this project's build directly through CMake is only supported for Windows 64-bit
# targets at this time. However, the takengine sub-project also supports Android targets (specifically arm64-v8a,
# armeabi-v7a, and x86) by building via the Android Gradle project rooted at takengine/android/build.gradle. See
# https://confluence.takmaps.com/pages/viewpage.action?spaceKey=COREDEV&title=Building+Native+Libraries for more details.

# Targeting 3.14.7 as that is the first CMake version to support the "Visual Studio 16 2019" build generator.
cmake_minimum_required(VERSION 3.14.7)
project(takengine VERSION 1.0
                  DESCRIPTION "TAK map engine project responsible for building native map engine artifacts."
                  LANGUAGES C CXX)

option(BUILD_JNI "Build JNI into the library" ON)

include(${CMAKE_CURRENT_SOURCE_DIR}/../engine/cmake/support/Config.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/../engine/cmake/support/conan.cmake)

# Required conan packages. Generates conan file as well as cmake find package scripts.
if(NOT ANDROID)
    conan_cmake_configure(REQUIRES
                            GLES-stub/2.0.0
                            khronos/1.0
                            stl-soft/1.9.119
                            tinygltf-tak/2.4.1
                            tinygltfloader-tak/0.9.5
                            ttp-dist/2.6.1
                            libLAS/1.8.2c
                          GENERATORS
                            cmake_find_package)
else()
    conan_cmake_configure(REQUIRES
                            stl-soft/1.9.119
                            tinygltf-tak/2.4.1
                            tinygltfloader-tak/0.9.5
                            ttp-dist/2.6.1
                            libLAS/1.8.2c
                          GENERATORS
                            cmake_find_package)
endif()

# Glean Conan platform settings
if (ANDROID)
    set (conan_settings 
        build_type=Release
    	compiler=${ANDROID_TOOLCHAIN}
        compiler.libcxx=libstdc++
        compiler.version=8
        os=Android
        os.api_level=29
    )
    if (${ANDROID_ABI} STREQUAL arm64-v8a)
        list (APPEND conan_settings arch=armv8)
    elseif (${ANDROID_ABI} STREQUAL armeabi-v7a)
        list (APPEND conan_settings arch=armv7)
    elseif (${ANDROID_ABI} STREQUAL x86)
        list (APPEND conan_settings arch=x86)
    endif ()
elseif (MSVC)
    set (conan_settings 
        build_type=Release
        "compiler=Visual Studio"
        compiler.runtime=MD
        compiler.version=14
        os=Windows
    )
elseif (UNIX AND NOT APPLE) #Linux
    set (conan_settings 
        build_type=Release
        compiler=gcc
        compiler.libcxx=libstdc++
        compiler.version=8
        os=Linux
        arch=x86_64
    )
elseif (APPLE AND CMAKE_SYSTEM_NAME STREQUAL "Darwin") #MacOS
    set (conan_settings
        build_type=Release
        compiler=gcc
        compiler.libcxx=libstdc++
        compiler.version=8
        os=Macos
        arch=x86_64
    )
else ()
    # Auto-detect for other platforms
    conan_cmake_autodetect(conan_settings)
endif ()

# Tell CMake to search cachefile directory for modules (where conan.cmake dumps the Find<package>.cmake files)
list (APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})

# If supplied with CONAN_PATH environment variable, pass to 
# conan_cmake support script to bypass searching for it in PATH
if (DEFINED ENV{CONAN_PATH})
    set (CONAN_COMMAND $ENV{CONAN_PATH})
endif()
conan_cmake_install(PATH_OR_REFERENCE ${CMAKE_BINARY_DIR}
                    BUILD missing
                    SETTINGS ${conan_settings})

# Find installed Conan packages. This will find the "Find<package>.cmake" files in CMAKE_MODULE_PATH that were
# generated by conan_cmake_install to get the <package>_INCLUDE_DIRS and <package>_LIBRARY_DIRS variables.
find_package (khronos)
find_package (stl-soft)
find_package (tinygltf-tak)
find_package (tinygltfloader-tak)
find_package (ttp-dist)
find_package (libLAS)
if(NOT ANDROID)
    find_package (GLES-stub)
endif()

# Add the takengine sub-project.
add_subdirectory(src/main/cpp)

# Add the takenginejni project only if building JNI
if(BUILD_JNI)
    # Add the takenginejni sub-project.
    add_subdirectory(src/main/jni)
endif()
