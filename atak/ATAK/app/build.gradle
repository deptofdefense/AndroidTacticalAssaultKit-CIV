import java.util.regex.Matcher
import java.util.regex.Pattern

////////////////////////////////////////////////////////////////////////////////
//
// ATAK_VERSION is for the version of ATAK that is being produced
//              with some examples include 3.12.1, 3.13.0, 4.0.0
//
//   This is used as part of the API value described as a major.minor.submajor build
//
// ATAK_VERSION_SUBMINOR is the subminor version of the build that would not
//                       have any effect on the API version number that is used
//   Rules for the subminor number
//           1) Should be [development] until ATAK is released.
//           2) When initially released it will be blank.
//           3) When ATAK is reissued without an API bump, the number is
//              incremented to ".1", ".2" etc.
//
//
//
////////////////////////////////////////////////////////////////////////////////


buildscript {
    apply from: '../../gradle/takrepo.gradle', to: project
    apply from: '../../gradle/versions.gradle', to: project

    ext.ATAK_VERSION = "4.5.0"
    ext.ATAK_VERSION_SUBMINOR = ".1"

    ext.isDevKitEnabled = { ->
        return getProperty('takRepoMavenUrl', null) != null &&
                getProperty('takDevkitEnabled', 'false') == 'true'
    }

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url = consumeUrl
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-devkit:${takDevkitVersion}"
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url = consumeUrl
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
if(isDevKitEnabled()) {
    apply plugin: 'atak-devkit-plugin'
}

dependencies {
     implementation fileTree(include: '*.jar', dir: 'libs')

     // Move to the minimal required official google offering for androidx
     //
     // As with previous versions, care must be taken not to duplicate the 
     // inclusion of these libraries in a plugin or utilize libraries with 
     // different versions.     The attempt is still to keep core as 
     // lightweight as possible when utilizing any support library to allow 
     // for greater flexibility for plugin developers.    This is the same 
     // paradigm that google has moved towards with breaking up the original 
     // android support libraries.  

     implementation 'androidx.fragment:fragment:1.3.6'
     implementation 'androidx.exifinterface:exifinterface:1.3.3'
     implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
     implementation 'androidx.lifecycle:lifecycle-process:2.3.1'


     androidTestImplementation 'androidx.test:runner:1.4.0'
     androidTestImplementation 'androidx.test:rules:1.4.0'
     androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
     androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
     androidTestImplementation 'androidx.test.ext:junit:1.1.3'

     androidTestImplementation "org.mockito:mockito-core:3.12.4"
     androidTestImplementation 'org.powermock:powermock-module-junit4:2.0.2'
     androidTestImplementation 'org.powermock:powermock-api-mockito2:2.0.2'
     androidTestImplementation 'org.powermock:powermock-core:2.0.2'
     androidTestImplementation 'org.powermock:powermock-module-junit4-rule:2.0.2'


    // This is an easy way to give androidTest and test access to the ATAK main.jar without needing
    // to copy and paste the standard block that checks each possible location a bunch more times.
    // This could backfire if there are other things plugins include as compileOnly that shouldn't
    // be included this way? If so we should switch to a modified block from ATAKVersions.gradle.
    configurations {
        testImplementation.extendsFrom androidTestImplementation
    }
}

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim()
        println("versionName[git]: $describe")
        return describe
    } catch (Exception ignored) {
       println("error occurred, using revision of 1")
       return 1
    }
}


def getVersionCode() {
    def vc = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takStaticVersion')
    if (vc != null) {
        try {
            def vci = vc.toInteger()
            println("Using static version from properties: " + vci)
            return vci
        } catch (Exception ignored) {
            throw new GradleException('takStaticVersion is not an integer - stopping build')
        }
    }
    try {
        new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = 'git'
                    args = ['show', '-s', '--format=%ct']
                    standardOutput = os
                    ignoreExitValue = true
                }
            def outputAsString = os.toString()
            ext.revision = "$outputAsString".toInteger()
            println("version[git]: $revision")
        }
    } catch (Exception ignored) {
       println("error occurred, using revision of 1")
       ext.revision = 1
    }

    return revision
}


def getVersionSource() {
    try {
        new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = 'git'
                    args = ['symbolic-ref', '--short', 'HEAD']
                    standardOutput = os
                    ignoreExitValue = true
                }
            def outputAsString = os.toString()
            ext.source = "$outputAsString".trim()
            println("source[git]: $source")
        }
    } catch (Exception ignored) {
       println("error occurred, using source of BETA-trunk")
       ext.source = "BETA-trunk"
    }
    return ext.source
}


// modified code to find the current flavor in progress
def getCommandFlavor() {
    String  tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    Pattern pattern
    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug|Sdk|Odk)")
    else if( tskReqStr.contains( "install" ) )
        pattern = Pattern.compile("install(\\w+)(Release|Debug|Sdk|Odk)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug|Sdk|Odk)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if( matcher.find() ) {
        return matcher.group(1)
    } else {
        return ""
    }
}

def getCurrentFlavor() {
    return getCommandFlavor().toLowerCase()
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    useLibrary 'org.apache.http.legacy'


    defaultConfig {

        // note that even though the targetSdk is 30, we are still setting the
        // minSdk to 21.    Ensure methods that are chosen exist in 21 or 
        // appropriate checks are in place to allow for correct behavior 
        // on versions 21 and up.

        targetSdkVersion 30   
        minSdkVersion 21
        multiDexEnabled true
        applicationId = "com.atakmap.app"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "application"

    productFlavors {
        civ { 
            getIsDefault().set(true)
            dimension "application"
            applicationIdSuffix = ".civ"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
            buildConfigField 'String', 'REDEPLOY_VERSION', '"450b"'
            buildConfigField 'boolean', 'MESH_NETWORK_DEFAULT','true'
            ndk { abiFilters "armeabi-v7a", "arm64-v8a", "x86" }
        }

        civSmall {
            dimension "application"
            applicationIdSuffix = ".civ"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
            buildConfigField 'String', 'REDEPLOY_VERSION', '"450b"'
            buildConfigField 'boolean', 'MESH_NETWORK_DEFAULT','true'
            versionNameSuffix "[playstore]"
            ndk { abiFilters "arm64-v8a" }
        }

        dmucSmall {
            dimension "application"
            applicationIdSuffix = ".civ"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
            buildConfigField 'String', 'REDEPLOY_VERSION', '"450b"'
            buildConfigField 'Boolean', 'MESH_NETWORK_DEFAULT','false'
            versionNameSuffix "[dmuc]"
            ndk { abiFilters "arm64-v8a" }
        }

    }

    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        sdk {
            def kf = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFile')
            def kfp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFilePassword')
            def ka = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyAlias')
            def kp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyPassword')

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }

        odk {
            def kf = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFile')
            def kfp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFilePassword')
            def ka = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyAlias')
            def kp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyPassword')

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }


        debug {
            def kf = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFile')
            def kfp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyFilePassword')
            def ka = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyAlias')
            def kp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takDebugKeyPassword')

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }
 
            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }

        release {
            def kf = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takReleaseKeyFile')
            def kfp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takReleaseKeyFilePassword')
            def ka = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takReleaseKeyAlias')
            def kp = getValueFromPropertiesFile(project.rootProject.file('local.properties'), 'takReleaseKeyPassword')

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }
    }

    buildTypes {
        all { 
        }

        release {
            buildConfigField 'String', 'DEV_BANNER', '""'
            minifyEnabled true
            proguardFile 'proguard-release.txt'
            signingConfig signingConfigs.release
        }

        debug {
            buildConfigField 'String', 'DEV_BANNER', '""'
            isDefault = true 
            minifyEnabled true
            proguardFile 'proguard-debug.txt'
            testProguardFiles 'proguard-debug.txt'
            testCoverageEnabled (project.hasProperty('coverage'))
            signingConfig signingConfigs.debug
            if (project.hasProperty('coverage')) 
                 android.defaultConfig.minSdkVersion 26
        }

        sdk {
            buildConfigField 'String', 'DEV_BANNER', '"DEVELOPER BUILD"'
            debuggable true
            minifyEnabled true
            proguardFile 'proguard-sdk.txt'
            signingConfig signingConfigs.sdk
            matchingFallbacks = ['debug']
        }

        odk {
            buildConfigField 'String', 'DEV_BANNER', '"TEST BUILD"'
            debuggable true
            minifyEnabled true
            proguardFile 'proguard-odk.txt'
            signingConfig signingConfigs.sdk
            matchingFallbacks = ['release']
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-" + ATAK_VERSION + ATAK_VERSION_SUBMINOR + "-" + getVersionName())
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = ATAK_VERSION + ATAK_VERSION_SUBMINOR + " (" + getVersionName() + ")"

        }

        // for civ
        civ.java.srcDirs = ['src/civ/java', 'src/common/java']
        civ.assets.srcDir 'src/civ/assets'
        civ.res.srcDir 'src/civ/res'
        civ.assets.srcDir 'src/full/assets'

        // for civSmall
        civSmall.java.srcDirs = ['src/civ/java', 'src/common/java']
        civSmall.assets.srcDir 'src/civ/assets'
        civSmall.res.srcDir 'src/civ/res'
        civSmall.assets.srcDir 'src/small/assets'

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        sdk.setRoot('build-types/sdk')
        odk.setRoot('build-types/odk')
    }

    lintOptions {
         checkReleaseBuilds true
         // Or, if you prefer, you can continue to check for errors in release builds,
         // but continue the build even when errors are found:
         abortOnError true
         disable "AppCompatCustomView", "AppCompatResource" 
    }
}

// `takkernel` dependencies declared after the `android` block so that all
// build types are declared
dependencies {

     if(findProject(':takkernel')) {
         api project(':takkernel:annotation')
         api project(':takkernel:port')
         api project(':takkernel:engine')
         api project(':takkernel:shared')
     } else {
          debugApi("gov.tak.kernel:takkernel-aar:${takKernelVersion}:debug@aar") { transitive = true }
          sdkApi("gov.tak.kernel:takkernel-aar:${takKernelVersion}:debug@aar") { transitive = true }
          odkApi("gov.tak.kernel:takkernel-aar:${takKernelVersion}:release@aar") { transitive = true }
          releaseApi("gov.tak.kernel:takkernel-aar:${takKernelVersion}:release@aar") { transitive = true }
     }
}

// copies over the minified.jar file which contains a completely deobfuscated jar file
// of all the classes used when running ATAK to include the dependency libraries
// such as the support libraries.
task copyFilesDebug {
    doLast { 
        copy {
          from "./build/intermediates/shrunk_jar/" + getCurrentFlavor() + "Debug/minified.jar"
          into "./build/libs"
          rename("minified.jar", "main.jar")
        }
        mkdir ("./build/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase())
        copy {
          from "build/intermediates/shrunk_jar/" + getCurrentFlavor() + "Debug/minified.jar"
          into "./build/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase()
          rename("minified.jar", "main.jar")
          println "deployed main.jar to: " + "./build/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase()
        }
    }
}

task copyFilesRelease { 
    doLast { 
        // temporary location
        mkdir ("./build/outputs/mapping/release/")
        copy {
          from "build/outputs/mapping/" + getCurrentFlavor() + "Release/mapping.txt"
          into "./build/outputs/mapping/release"
        }
        copy {
          from "build/outputs/mapping/" + getCurrentFlavor() + "Release/mapping.txt"
          into "./build/libs/"
          rename("mapping.txt", "mapping-" + getCurrentFlavor() + "-" + getVersionName() + "-" + getVersionCode()  + ".txt")
        }
        copy {
          from "build/outputs/mapping/" + getCurrentFlavor() + "Release/mapping.txt"
          into "./build/libs/"
        }
        mkdir ("./build/outputs/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase())
        copy {
          from "build/outputs/mapping/" + getCurrentFlavor() + "/release/mapping.txt"
          into "./build/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase()
          println "deployed mapping.txt to: " + "./build/libs/" + ATAK_VERSION + "." + getCurrentFlavor().toUpperCase()
        }
    }
}
task copyFilesSdk {
    doLast {
        copy {
          println "constructed plugin debug jar file for: " +  getCurrentFlavor()
          from "./build/intermediates/shrunk_jar/" + getCurrentFlavor() + "Sdk/minified.jar"
          into "./build/libs"
          rename("minified.jar", "main.jar")
        }
    }
}


configurations {
    civilianApiJar {
        canBeConsumed = true
        canBeResolved = false
    }
    android.applicationVariants.matching { variant ->
        'civ' == variant.flavorName
    }.all { variant ->
        "${variant.name}Mapping" {
            canBeConsumed = true
            canBeResolved = false
        }
    }
}


afterEvaluate {

    artifacts {

        // need an unobfuscated jar, which is provided by the "debug" build type
        Task apiTask = project.tasks.findByName('minifyCivDebugWithProguard')
        File apiJar = apiTask.outputs.files.filter {
            'minified.jar' == it.name
        }.singleFile

        // one API jar to rule them all ...
        civilianApiJar(apiJar) {
            builtBy(apiTask)
        }

        android.applicationVariants.matching { variant ->
            // our "core" is represented by the "civ" flavor only
            'civ' == variant.flavorName
        }.all { variant ->
            // buildType specific artifacts ...
            Task mappingTask = project.tasks.findByName("minify${variant.name.capitalize()}WithProguard")
            File mappingFile = mappingTask.outputs.files.filter {
                'mapping.txt' == it.name
            }.singleFile

            // the mapping artifact ...
            "${variant.name}Mapping"(mappingFile) {
                builtBy(mappingTask)
            }
        }
    }

    // Needs to take into account flavors
    Task installReleaseTask =  project.tasks.findByName("install" + getCommandFlavor() + "Release")
    Task assembleReleaseTask =  project.tasks.findByName("assemble" + getCommandFlavor() + "Release")
    Task installDebugTask =  project.tasks.findByName("install" + getCommandFlavor() + "Debug")
    Task assembleDebugTask =  project.tasks.findByName("assemble" + getCommandFlavor() + "Debug")
    Task assembleSdkTask =  project.tasks.findByName("assemble" + getCommandFlavor() + "Sdk")
    Task assembleOdkTask =  project.tasks.findByName("assemble" + getCommandFlavor() + "Odk")

    if (installDebugTask != null) {
        //println("found " + installDebugTask + " marking dependsOn " + assembleDebugTask);
        installDebugTask.dependsOn(assembleDebugTask)
    }

    if (installReleaseTask != null) {
        //println("found " + installReleaseTask + " marking dependsOn " + assembleReleaseTask);
        installReleaseTask.dependsOn(assembleReleaseTask)
    }

    if (assembleReleaseTask != null) {
        //println("found " + assembleReleaseTask + " marking dependsOn " + assembleDebugTask);
        assembleReleaseTask.dependsOn(assembleDebugTask)
        assembleReleaseTask.finalizedBy(copyFilesRelease)
    }

    if (assembleDebugTask != null) {
        assembleDebugTask.finalizedBy(copyFilesDebug)
    }

    if (assembleSdkTask != null) {
        assembleSdkTask.finalizedBy(copyFilesSdk)
    }

    if (assembleOdkTask != null) {
        assembleOdkTask.finalizedBy(copyFilesSdk)
    }
}

////////////////////////////////////////////////////////////////////////////////
// Test Harness using jacoco
// Note:
//    When compiled in debug mode, jacoco inserts itself into the 
//    the ATAKApplication class even in the case where the test 
//    instrumentation is not run.    This does not seem to be the 
//    case with the release builds.
//    The source code for jacoco is not under positive control and 
//
//    can be read more about here: https://www.eclemma.org/jacoco/
//    Exception observed on startup - 
//    System.err: java.io.FileNotFoundException: /jacoco.exec (Read-only file system)
//        --- snip ---
//       at org.jacoco.agent.rt.internal_8ff85ea.Offline.getProbes(Offline.java:51)
//       at com.atakmap.app.ATAKApplication.$jacocoInit(Unknown Source:13)
//        --- snip ---
//
////////////////////////////////////////////////////////////////////////////////

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android.applicationVariants.all { variant ->
    task "create${variant.name.capitalize()}JacocoTestReport" (type: JacocoReport, dependsOn: ["test${variant.name.capitalize()}UnitTest", "create${variant.name.capitalize()}CoverageReport"])  {

        reports {
            xml.enabled = true
            html.enabled = true
        }


        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
        def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/${variant.name}", excludes: fileFilter)
        def mainSrc = "$project.projectDir/src/main/java"

        sourceDirectories.setFrom(files([mainSrc]))
        classDirectories.setFrom(files([debugTree]))

        executionData.setFrom(fileTree(dir: project.buildDir, includes: [
                "jacoco/test${variant.name.capitalize()}UnitTest.exec", 
                "outputs/code_coverage/${variant.name}AndroidTest/connected/**/*.ec"
        ]))

        description = "Generates unified code coverage report for " + variant.name + " using Jacoco"
    }
}

// As recommended by the posts on https://github.com/mockk/mockk/issues/281 so that the Android minimum SDK would not
// need to be bumped to Android 26
configurations.all {
    resolutionStrategy {
        force("org.objenesis:objenesis:2.6")
    }
}
