 buildscript {
   ext.getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    ext.getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
            getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    ext.isDevKitEnabled = { ->
        return getProperty('maven.consume.url', null) != null
    }

    // private maven  artifacts may be resolved through mavenLocal, so idea is to keep the remote configuration well formed but obviously defaulted
    ext.consumeUrl = getProperty('maven.consume.url', 'http://localhost/')
    ext.mavenUser = getProperty('maven.user', 'invalid')
    ext.mavenPassword = getProperty('maven.password', 'invalid')

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = consumeUrl
            credentials {
                username = mavenUser
                password = mavenPassword
    }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
    }
}

allprojects {
    repositories {
        google()
        maven {
            url = consumeUrl
            credentials {
                username = mavenUser
                password = mavenPassword
            }
        }
        maven {
            url "https://jitpack.io"
        }
        mavenCentral()
        mavenLocal()
    }
}


apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    ndkVersion "12.1.2977051"

    defaultConfig {
        targetSdkVersion 29
        minSdkVersion 21
        ndk {
            moduleName 'atakjni'
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
    }

    // Only enable externalNativeBuild on machines with NDK installed -> valid ndkDir
    if (isNativeBuildEnabled()) {
        externalNativeBuild.cmake.path = '../CMakeLists.txt'
    } else if(ndkVersion != null) {
        // developer has requested NDK build, but no valid NDK is present
        throw new GradleException("NDK builds require version " + ndkVersion)
    }

    defaultConfig {
        minSdkVersion 21

        externalNativeBuild {
            cmake {
                arguments "-DCMAKE_TOOLCHAIN_FILE=cmake/android.toolchain.cmake",
                    "-DCMAKE_ANDROID_NDK=${project.android.ndkDirectory.toString().replaceAll('\\\\', '/')}",
                    "-DANDROID_TOOLCHAIN=gcc",
                    "-DANDROID_STL=gnustl_static",
                    "-DANDROID_PLATFORM=android-24" // 24 is the highest so available in 12 ndk??
                cFlags "-D__GXX_EXPERIMENTAL_CXX0X__"
                cppFlags "-fexceptions", "-frtti"
            }
        }
    }

    flavorDimensions "application"

    productFlavors {

        civ {
            dimension "application"
        }
        civSmall {
            dimension "application"
        }

    }

    buildTypes {
        all {
        }

        release {
        }

        debug {
            testCoverageEnabled (project.hasProperty('coverage') ? true : false)
        }

        sdk {
        }

        odk {
        }
    }

    sourceSets {
        main {
        }


        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        sdk.setRoot('build-types/sdk')
    }

    // ndk-build will copy these several dependencies into the 'build'
    // directory, and try to merge them back out into the output package. since
    // the files exist both in 'jniLibs' and the 'build' directory, merge will
    // fail on the duplicate files. instruct a 'pickFirst' strategy on the
    // duplicates.
    packagingOptions {
        pickFirst 'lib/x86/libgdal.so'
        pickFirst 'lib/x86/libspatialite.so'
        pickFirst 'lib/x86/libtakengine.so'

        pickFirst 'lib/armeabi-v7a/libgdal.so'
        pickFirst 'lib/armeabi-v7a/libspatialite.so'
        pickFirst 'lib/armeabi-v7a/libtakengine.so'

        pickFirst 'lib/arm64-v8a/libgdal.so'
        pickFirst 'lib/arm64-v8a/libspatialite.so'
        pickFirst 'lib/arm64-v8a/libtakengine.so'
    }
}

// Love this quote from StackOverflow
// Ahh, looks like you have to move the dependencies block below the android block. How intuitive.
dependencies {
    api fileTree(dir: 'libs', include: '*.jar')
    if(findProject(':takkernel')) {
        implementation project(':takkernel:annotation')
        implementation project(':takkernel:port')
    } else {
         debugImplementation 'gov.tak.kernel:takkernel-aar:0.0.0:debug@aar'
         sdkImplementation 'gov.tak.kernel:takkernel-aar:0.0.0:debug@aar'
         odkImplementation 'gov.tak.kernel:takkernel-aar:0.0.0:release@aar'
         releaseImplementation 'gov.tak.kernel:takkernel-aar:0.0.0:release@aar'
    }
}

clean {
    // external unpacks
    delete 'external/takengine/include'
    delete 'external/ttp/ttp-include'

    // JNI headers
    doLast {
        def javah_properties = new File(project.projectDir, 'src/main/cpp/javah.properties')
        if (javah_properties.isFile() && javah_properties.canRead()) {
            def prop = new Properties()
            def reader = javah_properties.newReader()
            try {
                prop.load(reader)
            } finally {
                reader.close()
            }

            prop.each { headerFile, ignored ->
                delete 'src/main/cpp/' + headerFile
            }
        } else {
            logger.warn('javah.properties is missing')
        }
    }
}

def isNativeBuildEnabled() {
    // Only enable externalNativeBuild on machines with NDK installed -> valid ndkDir
    try {
        def ndkDir = project.android.ndkDirectory
         
        if(ndkDir == null || ndkDir.toString().isEmpty()) {
            return false
        }
        def detectedNdkVersion
        def releaseFile = new File(ndkDir, 'RELEASE.TXT')
        def propertyFile = new File(ndkDir, 'source.properties')
        if(releaseFile.isFile()) {
            detectedNdkVersion = releaseFile.text.trim().split()[0].split('-')[0]
        } else if(propertyFile.isFile()) {
            detectedNdkVersion = getValueFromPropertiesFile(propertyFile, 'Pkg.Revision')
        }
        return detectedNdkVersion != null && detectedNdkVersion == android.ndkVersion
    } catch(Exception e) {
        return false;
    }
}

static def getValueFromPropertiesFile(File propFile, String key) {
    if(!propFile.isFile() || !propFile.canRead())
        return null
    def prop = new Properties()
    def reader = propFile.newReader()
    try {
        prop.load(reader)
    } finally {
        reader.close()
    }
    return prop.get(key)
}

// JNI header generation
android.libraryVariants.all { variant ->
    task "generate${variant.name.capitalize()}JniHeaders"(dependsOn: ["compile${variant.name.capitalize()}JavaWithJavac"]) {
        // param1 = header file name (including .h)
        // param2 = class name (as string) or class names (as string list)
        ext.javah = { param1, param2 ->
            exec {
                // configure classpath used by javah
                def atakmapengine_classpath = "build/intermediates/javac/" + variant.name + "/classes"
                def android_classpath = android.sdkDirectory.path + "/platforms/" + android.compileSdkVersion + "/android.jar"
                def javah_classpath =
                        atakmapengine_classpath + File.pathSeparator +
                        (new File(projectDir, "libs/gdal.jar")).toString() + File.pathSeparator +
                        android_classpath
                // the output file
                def output_file = (new File(projectDir, "src/main/cpp/" + param1)).toString()

                // create command line args
                ArrayList<String> clargs = ['javah', '-classpath', "${javah_classpath}", '-o', output_file]
                clargs.addAll(param2)

                // execute javah
                commandLine clargs
            }
        }

        doLast {
            def javah_properties = new File(project.projectDir, 'src/main/cpp/javah.properties')
            if(!javah_properties.isFile() || !javah_properties.canRead())
                throw new GradleException('javah.properties file is missing')
            def prop = new Properties()
            def reader = javah_properties.newReader()
            try {
                prop.load(reader)
            } finally {
                reader.close()
            }

            prop.each { key, val ->
                javah(key, val.split(', '))
            }
        }
    }
}

// NDK build external dependency install
task installDepends {
    doLast {
        def arch = ['armeabi-v7a', 'arm64-v8a', 'x86']
        // copy built .so's into the 'jniLibs' directory
        arch.each { aarch ->
            copy {
                from("../../../takthirdparty/builds/android-${aarch}-release/lib/") {
                    include 'libassimp.so'
                    include 'libcharset.so'
                    include 'libgdal.so'
                    include 'libgdalalljni.so'
                    include 'libiconv.so'
                    include 'libjassimp.so'
                    include 'libltidsdk.so' // only available if DSDK present for build
                    include 'libogdi.so'
                    include 'libproj.so'
                    include 'libspatialite.so'
                }
                from("../../../takthirdparty/builds/android-${arch}-release/lib/ogdi") {
                    include 'libogdi.so'
                }

                into "src/main/jniLibs/${aarch}/"

                // always overwrite
                duplicatesStrategy 'include'
            }
        }
        // install TAK Third Party JARs
        copy {
            from('../../../takthirdparty/builds/android-x86-release/java/') {
                include 'gdal.jar'
                include 'gdaldata.jar'
                include 'jassimp.jar'
            }

            into projectDir.getAbsolutePath() + '/libs/'

             // always overwrite
            duplicatesStrategy 'include'
        }
    }
}

android.libraryVariants.all { variant ->
    // install the TAK Third Party dependencies
    tasks.getByName("compile${variant.name.capitalize()}JavaWithJavac").dependsOn("installDepends")
    // NDK build depends on JNI header generation
    tasks.getByName("externalNativeBuild${variant.name.capitalize()}").dependsOn("generate${variant.name.capitalize()}JniHeaders")

    // make build of `libatakjni` depend on build of `libtakengine`
    project(':libtakengine').ext.'jniLibs.outputDir' = new File(project.projectDir, 'src/main/jniLibs').getAbsolutePath()
    tasks.getByName("externalNativeBuild${variant.name.capitalize()}").dependsOn(":libtakengine:install${variant.name.capitalize()}Outputs")
}
